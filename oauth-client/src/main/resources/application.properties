spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
#embeded Tomcat
server.port=8081
# session timeout in seconds
session-timeout=3600

# Comma-separated list of basenames, each following the ResourceBundle convention.
spring.messages.basename=i18n/messages
# Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.
spring.messages.cache-seconds=-1
# Message bundles encoding.
spring.messages.encoding=UTF-8
#spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.

# ===============================
# = DATA SOURCE
# ===============================

# Spring Boot can auto-configure embedded H2, HSQL and Derby databases.
# You donâ€™t need to provide any connection URLs, simply include a build dependency
# to the embedded database that you want to use.

# Set here configurations for the database connection

# Connection url for the database
#--MY SQL
#spring.datasource.url = jdbc:mysql://localhost:3306/db_name?useUnicode=true&characterEncoding=utf-8
#spring.datasource.driverClassName=com.mysql.jdbc.Driver

# Username and password
#spring.datasource.username =
#spring.datasource.password =

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.naming_strategy = org.hibernate.cfg.EJB3NamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

logging.level.=info

# Email (MailProperties)
#spring.mail.host=
#spring.mail.port=
#spring.mail.username=
#spring.mail.password=
#spring.mail.default-encoding=UTF-8
#spring.mail.properties.*= # properties to set on the JavaMail session

#Second level cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory


# SPRING RESOURCES HANDLING (ResourceProperties)
# Locations of static resources.
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/

# LIQUIBASE (LiquibaseProperties)
# Change log configuration path
liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml
# Check the change log location exists.
liquibase.check-change-log-location=true
# Comma-separated list of runtime contexts to use.
#liquibase.contexts=
# Default database schema.
#liquibase.default-schema=
# Drop the database schema first.
liquibase.drop-first=false
# Enable liquibase support.
liquibase.enabled=true
# Comma-separated list of runtime labels to use.
#liquibase.labels=
# Change log parameters.
#liquibase.parameters.*=
# Login password of the database to migrate.
#liquibase.password=
# JDBC url of the database to migrate. If not set, the primary configured data source is used.
#liquibase.url=
# Login user of the database to migrate.
#liquibase.user=